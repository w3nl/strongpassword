{"version":3,"sources":["is_strong_password.js"],"names":["Typo","require","StrongPassword","params","_classCallCheck","this","results","strong","locale","password","minimumLength","minimumWords","mustHaveNumbers","numbers","mustHaveLowerCase","lowercase","mustHaveUpperCase","uppercase","dictionaries","version","check","reasonText","reason","notRealWords","dictionary","dictionaryPath","length","split","match","forEach","value","cleanValue","replace","Number","isInteger","push","join","module","_typeof","exports"],"mappings":"+kBAAMA,KAAyB,mBAAXC,SAAyBA,QAAQ,WAAaD,KAK5DE,eAAAA,WAMF,QAAAA,GAAYC,GAAQC,gBAAAC,KAAAH,EAChB,IAAII,GAAAA,MAIJ,OAFAD,MAAKE,QAAS,EAETJ,GAMLE,KAAKG,OAASL,EAAOK,QAAU,QAC/BH,KAAKI,SAAWN,EAAOM,SACvBJ,KAAKK,cAAgBP,EAAOO,eAAiB,GAC7CL,KAAKM,aAAeR,EAAOQ,cAAgB,EAC3CN,KAAKO,iBAAkB,EACM,iBAAlBT,GAAOU,UACdR,KAAKO,gBAAkBT,EAAOU,SAGlCR,KAAKS,mBAAoB,EACM,iBAApBX,GAAOY,YACdV,KAAKS,kBAAoBX,EAAOY,WAGpCV,KAAKW,mBAAoB,EACM,iBAApBb,GAAOc,YACdZ,KAAKW,kBAAoBb,EAAOc,WAGpCZ,KAAKa,aAAef,EAAOe,eAAgB,EAE3Cb,KAAKc,QAAU,QAEfb,EAAUD,KAAKe,QACff,KAAKE,OAASD,EAAQC,YACtBF,KAAKgB,WAAaf,EAAQgB,cA9BtBjB,KAAKgB,WAAa,kEAuCtB,GAAId,IAAS,EACTc,EAAAA,OACAE,KACAC,EAAAA,MAUJ,OAPIA,GADAnB,KAAKa,aACQ,GAAIlB,MAAKK,KAAKG,QAAQ,GAAO,GACtCiB,eAAgBpB,KAAKa,eAGZ,GAAIlB,MAAKK,KAAKG,QAG1BH,KAAKI,SAONJ,KAAKI,SAASiB,OAASrB,KAAKK,eAExBH,QAAQ,EACRe,OAAQ,YAIZjB,KAAKI,SAASkB,MAAM,KAAKD,OAASrB,KAAKM,cAEnCJ,QAAQ,EACRe,OAAQ,iBAIZjB,KAAKO,kBAAoBP,KAAKI,SAASmB,MAAM,SAEzCrB,QAAQ,EACRe,OAAQ,kBAIZjB,KAAKS,oBAAsBT,KAAKI,SAASmB,MAAM,WAE3CrB,QAAQ,EACRe,OAAQ,yBAIZjB,KAAKW,oBAAsBX,KAAKI,SAASmB,MAAM,WAE3CrB,QAAQ,EACRe,OAAQ,oCAIhBjB,KAAKI,SAASkB,MAAM,KAAKE,QAAQ,SAASC,GACtC,GAAIC,GAAaD,EAAME,QAAQ,UAAW,GAErCR,GAAWJ,MAAMW,IAAgBE,OAAOC,UAAuB,EAAbH,IACnDR,EAAaY,KAAKL,KAItBP,EAAaG,OAAS,IACtBL,EAAa,8BAAiCE,EAAaa,KAAK,MAAS,IACzE7B,GAAS,IAITA,OAAQA,EACRe,OAAQD,KAvDJd,QAAQ,EACRe,OAAQ,0CAgEhB,MAAOjB,MAAKE,sCASZ,MAAOF,MAAKgB,mBAIE,aAAlB,mBAAOgB,QAAP,YAAAC,QAAOD,UAAiD,WAA1BC,QAAOD,OAAOE,WAC5CF,OAAOE,QAAUrC","file":"app.js","sourcesContent":["const Typo = typeof require != 'undefined' ? require('typo-js') : Typo;\n\n/**\n * Strong password validation.\n */\nclass StrongPassword {\n    /**\n     * Contructor.\n     *\n     * @param {object} params\n     */\n    constructor(params) {\n        let results;\n\n        this.strong = false;\n\n        if (!params) {\n            this.reasonText = 'no params';\n\n            return;\n        }\n\n        this.locale = params.locale || 'en_US';\n        this.password = params.password;\n        this.minimumLength = params.minimumLength || 10;\n        this.minimumWords = params.minimumWords || 4;\n        this.mustHaveNumbers = true;\n        if (typeof params.numbers == 'boolean') {\n            this.mustHaveNumbers = params.numbers;\n        }\n\n        this.mustHaveLowerCase = true;\n        if (typeof params.lowercase == 'boolean') {\n            this.mustHaveLowerCase = params.lowercase;\n        }\n\n        this.mustHaveUpperCase = true;\n        if (typeof params.uppercase == 'boolean') {\n            this.mustHaveUpperCase = params.uppercase;\n        }\n\n        this.dictionaries = params.dictionaries || false;\n\n        this.version = '1.1.4';\n\n        results = this.check();\n        this.strong = results.strong;\n        this.reasonText = results.reason;\n    }\n\n    /**\n     * Check if the password is strong.\n     *\n     * @return {boolean}\n     */\n    check() {\n        let strong = true;\n        let reasonText;\n        let notRealWords = [];\n        let dictionary;\n\n        if (this.dictionaries) {\n            dictionary = new Typo(this.locale, false, false, {\n                dictionaryPath: this.dictionaries\n            });\n        } else {\n            dictionary = new Typo(this.locale);\n        }\n\n        if (!this.password) {\n            return {\n                strong: false,\n                reason: 'empty'\n            };\n        }\n\n        if (this.password.length < this.minimumLength) {\n            return {\n                strong: false,\n                reason: 'to short'\n            };\n        }\n\n        if (this.password.split(' ').length < this.minimumWords) {\n            return {\n                strong: false,\n                reason: 'too few words'\n            };\n        }\n\n        if (this.mustHaveNumbers && !this.password.match(/\\d+/g)) {\n            return {\n                strong: false,\n                reason: 'has no numbers'\n            };\n        }\n\n        if (this.mustHaveLowerCase && !this.password.match(/[a-z]/g)) {\n            return {\n                strong: false,\n                reason: 'has no alphabet chars'\n            };\n        }\n\n        if (this.mustHaveUpperCase && !this.password.match(/[A-Z]/g)) {\n            return {\n                strong: false,\n                reason: 'has no uppercase alphabet chars'\n            };\n        }\n\n        this.password.split(' ').forEach(function(value) {\n            var cleanValue = value.replace(/[,.?!]/g, '');\n\n            if (!dictionary.check(cleanValue) && !Number.isInteger(cleanValue * 1)) {\n                notRealWords.push(value);\n            }\n        });\n\n        if (notRealWords.length > 0) {\n            reasonText = 'doesnt has a real word(s) [' + (notRealWords.join(', ')) + ']';\n            strong = false;\n        }\n\n        return {\n            strong: strong,\n            reason: reasonText\n        };\n    }\n\n    /**\n     * Return if the password is strong.\n     *\n     * @return {boolean}\n     */\n    get isStrong() {\n        return this.strong;\n    }\n\n    /**\n     * Return the reason if the password is not strong.\n     *\n     * @return {boolean}\n     */\n    get reason() {\n        return this.reasonText;\n    }\n}\n\nif (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = StrongPassword;\n}\n"]}
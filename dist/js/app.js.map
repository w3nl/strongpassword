{"version":3,"sources":["is_strong_password.js"],"names":["Typo","require","StrongPassword","params","results","strong","reasonText","locale","password","minimumLength","minimumWords","mustHaveNumbers","numbers","mustHaveLowerCase","lowercase","mustHaveUpperCase","uppercase","dictionaries","version","check","reason","notRealWords","dictionary","dictionaryPath","length","split","match","forEach","value","cleanValue","replace","Number","isInteger","push","join","module","exports"],"mappings":"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","file":"app.js","sourcesContent":["const Typo = typeof require != 'undefined' ? require('typo-js') : Typo;\n\n/**\n * Strong password validation.\n */\nclass StrongPassword {\n    /**\n     * Contructor.\n     *\n     * @param {object} params\n     */\n    constructor(params) {\n        let results;\n\n        this.strong = false;\n\n        if (!params) {\n            this.reasonText = 'no params';\n\n            return;\n        }\n\n        this.locale = params.locale || 'en_US';\n        this.password = params.password;\n        this.minimumLength = params.minimumLength || 10;\n        this.minimumWords = params.minimumWords || 4;\n        this.mustHaveNumbers = true;\n        if (typeof params.numbers == 'boolean') {\n            this.mustHaveNumbers = params.numbers;\n        }\n\n        this.mustHaveLowerCase = true;\n        if (typeof params.lowercase == 'boolean') {\n            this.mustHaveLowerCase = params.lowercase;\n        }\n\n        this.mustHaveUpperCase = true;\n        if (typeof params.uppercase == 'boolean') {\n            this.mustHaveUpperCase = params.uppercase;\n        }\n\n        this.dictionaries = params.dictionaries || false;\n\n        this.version = '1.1.2';\n\n        results = this.check();\n        this.strong = results.strong;\n        this.reasonText = results.reason;\n    }\n\n    /**\n     * Check if the password is strong.\n     *\n     * @return {boolean}\n     */\n    check() {\n        let strong = true;\n        let reasonText;\n        let notRealWords = [];\n        let dictionary;\n\n        if (this.dictionaries) {\n            dictionary = new Typo(this.locale, false, false, {\n                dictionaryPath: this.dictionaries\n            });\n        } else {\n            dictionary = new Typo(this.locale);\n        }\n\n        if (!this.password) {\n            return {\n                strong: false,\n                reason: 'empty'\n            };\n        }\n\n        if (this.password.length < this.minimumLength) {\n            return {\n                strong: false,\n                reason: 'to short'\n            };\n        }\n\n        if (this.password.split(' ').length < this.minimumWords) {\n            return {\n                strong: false,\n                reason: 'too few words'\n            };\n        }\n\n        if (this.mustHaveNumbers && !this.password.match(/\\d+/g)) {\n            return {\n                strong: false,\n                reason: 'has no numbers'\n            };\n        }\n\n        if (this.mustHaveLowerCase && !this.password.match(/[a-z]/g)) {\n            return {\n                strong: false,\n                reason: 'has no alphabet chars'\n            };\n        }\n\n        if (this.mustHaveUpperCase && !this.password.match(/[A-Z]/g)) {\n            return {\n                strong: false,\n                reason: 'has no uppercase alphabet chars'\n            };\n        }\n\n        this.password.split(' ').forEach(function(value) {\n            var cleanValue = value.replace(/[,.?!]/g, '');\n\n            if (!dictionary.check(cleanValue) && !Number.isInteger(cleanValue * 1)) {\n                notRealWords.push(value);\n            }\n        });\n\n        if (notRealWords.length > 0) {\n            reasonText = 'doesnt has a real word(s) [' + (notRealWords.join(', ')) + ']';\n            strong = false;\n        }\n\n        return {\n            strong: strong,\n            reason: reasonText\n        };\n    }\n\n    /**\n     * Return if the password is strong.\n     *\n     * @return {boolean}\n     */\n    get isStrong() {\n        return this.strong;\n    }\n\n    /**\n     * Return the reason if the password is not strong.\n     *\n     * @return {boolean}\n     */\n    get reason() {\n        return this.reasonText;\n    }\n}\n\nif (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = StrongPassword;\n}\n"]}